start *Grammar =
  A=rules { return &Grammar{rules: A} }
;

rules []*Rule =
  R=rules S=rule {
    for _, r := range S {
      R = append(R, r)
    }
    return R
  }
  rule {}
;

rule []*Rule =
  S=id T=id '=' P=patterns ';' {
    symbol := S.data
    typ := T.data
    patterns := P
    var rules []*Rule
    for _, pattern := range patterns {
      code := pattern[len(pattern)-1]
      pattern = pattern[0 : len(pattern)-1]
      vars := make([]string, len(pattern))
      for i, pat := range pattern {
        if len(pat) > 2 && pat[0] != '\'' && pat[1] == '=' {
          vars[i] = pat[0:1]
          pattern[i] = pat[2:]
        }
      }
      rule := &Rule{
        symbol: symbol,
        typ: typ,
        pattern: pattern,
        vars: vars,
        code: code,
      }
      rules = append(rules, rule)
    }
    return rules
  }
;

patterns [][]string =
  P=patterns C=patcode { return append(P, C) }
  P=patcode { return [][]string{P} }
;

patcode []string =
  P=pattern C=code { return append(P, C.data) }
;

pattern []string =
  P=pattern T=id { return append(P, T.data) }
  T=id { return []string{T.data} }
;
